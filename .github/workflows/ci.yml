name: CI/CD

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  JAVA_OPTS: -Xmx3G
  JVM_OPTS: -Xmx3G

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'

      - name: Check formatting
        run: sbt scalafmtCheckAll

      - name: Check binary compatibility
        run: sbt mimaReportBinaryIssues

  test:
    name: Test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        scala: ['2.13.16', '3.3.4', '3.4.3', '3.5.2']
        java: ['11', '17', '21']
        exclude:
          # Reduce matrix size - test all Scala versions on Ubuntu with Java 17
          # and test Java versions on Ubuntu with Scala 2.13
          - os: macos-latest
            java: '11'
          - os: macos-latest
            java: '21'
          - os: windows-latest
            java: '11'
          - os: windows-latest
            java: '21'
          - os: macos-latest
            scala: '3.4.3'
          - os: macos-latest
            scala: '3.5.2'
          - os: windows-latest
            scala: '3.4.3'
          - os: windows-latest
            scala: '3.5.2'

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          cache: 'sbt'

      - name: Run tests
        run: sbt ++${{ matrix.scala }} testAll

      - name: Run native tests (Ubuntu only)
        if: matrix.os == 'ubuntu-latest' && matrix.scala == '2.13.16' && matrix.java == '17'
        run: sbt ++${{ matrix.scala }} "testOnly *NativeTestSpec"

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint]
    
    services:
      localstack:
        image: localstack/localstack:3.9.0
        ports:
          - 4566:4566
        env:
          DEBUG: 1
          SERVICES: s3,iam
          AWS_DEFAULT_REGION: us-east-1
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          S3_SKIP_SIGNATURE_VALIDATION: 1
          S3_FORCE_PATH_STYLE: 1
          LOCALSTACK_HOST: localhost
          EDGE_PORT: 4566
          PERSISTENCE: 0
        options: >-
          --health-cmd "curl -f http://localhost:4566/_localstack/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 30s
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'
      
      - name: Wait for LocalStack
        run: |
          echo "Waiting for LocalStack to be ready..."
          timeout 60s bash -c 'until curl -f http://localhost:4566/_localstack/health; do sleep 2; done'
          echo "LocalStack is ready!"
      
      - name: Setup S3 bucket
        run: |
          # Install AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          
          # Configure AWS CLI for LocalStack
          export AWS_ACCESS_KEY_ID=test
          export AWS_SECRET_ACCESS_KEY=test
          export AWS_DEFAULT_REGION=us-east-1
          
          # Create test bucket
          aws --endpoint-url=http://localhost:4566 s3api create-bucket \
            --bucket zio-opendal-test-bucket \
            --region us-east-1 \
            --create-bucket-configuration LocationConstraint=us-east-1
          
          # Verify bucket creation
          aws --endpoint-url=http://localhost:4566 s3 ls
      
      - name: Run integration tests
        run: sbt IntegrationTest/test
        env:
          ENABLE_INTEGRATION_TESTS: true
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
          S3_ENDPOINT_URL: http://localhost:4566
          OPENDAL_S3_ENDPOINT: http://localhost:4566
          OPENDAL_S3_REGION: us-east-1
          OPENDAL_S3_ACCESS_KEY_ID: test
          OPENDAL_S3_SECRET_ACCESS_KEY: test
          OPENDAL_S3_BUCKET: zio-opendal-test-bucket
          AWS_S3_FORCE_PATH_STYLE: true

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'

      - name: Generate documentation
        run: sbt doc

      - name: Deploy documentation
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/scala-3.5.2/api
          destination_dir: api

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'

      - name: Setup GPG
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.PGP_PRIVATE_KEY }}
          passphrase: ${{ secrets.PGP_PASSPHRASE }}

      - name: Publish snapshots
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        run: sbt +publishSigned
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}

      - name: Publish release
        if: startsWith(github.ref, 'refs/tags/v')
        run: sbt +publishSigned sonatypeBundleRelease
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}

  dependency-submission:
    name: Dependency Submission
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'sbt'

      - name: Submit dependencies
        uses: scalacenter/sbt-dependency-submission@v2
        with:
          modules-ignore: examples_3 examples_2.13
          configs-ignore: test scala-tool scala-doc-tool
